from __future__ import division
import numpy as np
import sys
sys.path.insert(0,'/home/aidan/thesis/probe_code/fvcomprobe/const_panels/')
from structFunc import conv_time
import netCDF4 as net
import matplotlib.tri as Tri
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt


if __name__ == "__main__":

    fileDir = '/home/aidan/thesis/ncdata/gp/2014/'
    filename = 'dngrid_0001.nc'
    siglay = np.array([0.98999,0.94999,0.86999,0.74999,0.58999,0.41000,0.25000,0.13000,0.05000,0.01000])
    ### BPb -TA
    #elements = [17521, 18093, 18092, 18643, 19188, 19702, 20191, 20685, 21180, 21675, 22185, 22705, 23228, 23758, 24283, 24782, 25275, 25774, 26276, 26759, 27219, 27653, 28084, 28527]
    ## north gap
    #elements = [ 9204,  9203,  8761,  8760,  8764,  8763,  8360,  7944,  7943, 7538,  7537,  7135,  7134,  7515,  7517,  7518,  7113,  7119, 7526,  7530,  7529,  7532,  7549,  7547,  7858,  7857,  7860, 7859,  7455,  7445,  7844,  8258,  8261,  8263,  8682,  8678, 8677,  9115,  9113,  9118,  9112,  9111,  9571, 10044, 10045, 10041, 10507, 10506, 10508, 10517, 11035, 11034, 11576, 11602, 12161, 12160, 12736, 12735, 13325, 13323, 13321, 13934, 14560, 15185, 15806, 16386, 16385, 16962, 17537, 18108, 18107, 18656, 18655, 19199, 19197, 19712, 20199, 20693, 21187, 21188, 21682, 21681, 22190, 22710, 23232, 23231, 23761, 23760, 24285, 24783, 25275, 25774, 26275, 26756, 27216, 27650, 28080, 28521, 28979, 29452, 29929, 30408, 30899, 31402, 31910, 32421, 32423, 32913, 32912, 33374, 33373, 33803, 33802, 34215, 34214, 34615, 35029, 35462, 35914, 36372, 36813, 37232, 37634, 37640, 38046, 38045, 38444, 38831, 39202, 39553, 39896, 40244, 40594, 40593, 40955, 40954, 41319, 41679, 42053, 42435, 42827, 43226, 43225, 43625, 43624, 44029, 44443, 44845, 45223, 45227, 45593, 45972, 46361, 46364, 46751, 46752, 47140, 47542, 47957, 48361, 48360, 48764, 49170, 49585, 49584, 50007, 50006, 50435, 50875, 51317, 51761, 52212, 52670, 53143, 53615, 53614, 54084, 54574, 54573]
    ### south passage
    # top
    #elements = [41420, 41421, 41422, 41787, 41425, 41426, 41427, 41428, 41429, 41430, 41431, 41063, 41064, 40698, 40699, 40700, 40701, 40702, 40703, 40348, 40349, 40350, 40351, 40352, 40007, 40008, 39664, 39665, 39666, 39311, 39312, 39670, 39671, 39672, 39673, 39675, 39676, 39677, 39678, 39679, 39326, 39327, 39328, 39329, 39330, 39332, 39333, 39334, 38959, 38960, 38961, 38962, 38567, 38568, 38569, 38570, 38571, 38166, 38167, 38168, 38169, 38170, 38171, 38172, 38173, 38581, 38176, 38177, 38178, 38179, 38180, 38181, 38182, 37775, 37776, 37777, 37778, 37779, 38189, 38192, 38193, 38194, 38603, 38604, 38999, 39001, 39004, 39005, 38611, 38612, 38613, 38614, 38615, 38616, 39013, 39014, 39016, 39017, 39386, 39390, 39391, 39392, 39748, 39749, 39750, 39751, 39752, 39753, 39754, 39402, 39403, 39404, 39759, 39760, 39762, 39763]
    # bottom
    #elements = [48484, 48485, 48885, 48886, 49295, 49296, 49717, 49718, 49299, 49300, 49301, 49302, 49303, 49725, 49726, 49727, 49728, 50156, 49732, 49733, 49734, 49735, 49736, 49737, 49317, 49318, 49319, 49742, 49743, 50169, 49746, 49747, 49748, 49749, 49750, 49751, 49752, 50177, 50178, 50613, 50181, 50182, 50183, 50616, 50620, 50621, 50188, 50189, 50190, 50191, 50192, 50193, 50194, 50195, 50196, 50197, 49773, 49774, 50201, 50202, 50203, 50204, 50205, 50206, 50641, 50642, 50643, 50644, 50645, 50214, 50215, 50216, 50217, 50218, 50653, 50654, 50655, 50656, 51097, 51098, 51099, 51100, 51101, 51102, 51103, 51104, 51105, 51106, 51107, 51108, 51555, 51556, 51557, 51558, 51559, 51560, 52009, 52010, 52011, 52012, 52469, 52016, 52017, 52018, 52019, 52020, 52022, 52023, 52024, 52479, 52482, 52483, 52484, 52485, 52486, 52951, 52952, 52953, 52492, 52493, 52494, 52958, 52961, 52962, 52963, 52964, 53435, 53436, 53438, 53439, 53441]
    ### north pass
    # far top
    #elements = [44099, 43692, 43691, 43690, 43684, 43285, 43277, 43276, 42874, 42873, 42872, 42868, 42867, 42472, 42471, 42091, 42090, 42089, 42088, 42087, 42086, 42085, 42084, 42082, 42081, 42080, 42079, 42078, 42077, 42076, 42075, 42454, 42453, 42452, 42451, 42450, 42449, 42448, 42447, 42446, 42445, 42443, 42442, 42059, 42058, 42056, 42055, 42054, 42053, 42052, 42051, 42050, 42049, 42048, 42047, 42046, 42045, 42044, 42043, 42042, 42041, 42422, 42421, 42420, 42419, 42418, 42033, 42032, 42030, 42029, 42028, 42410, 42409, 42799, 42798, 42797, 42404, 42403, 42402, 42790, 42794, 43186, 43185, 43184, 43183, 43182, 43181, 43180, 43579, 43578, 43580, 43981, 43980, 43979, 44392, 44391, 44791, 44790, 44789, 44787, 44786, 44785, 44784, 44783, 44782, 44781, 44780, 44779, 45159, 44776, 44775, 44773, 44772, 44774, 45150, 45151, 45521, 45520, 45519, 45518, 45517, 45515, 45514, 45516, 45890, 45889, 45888, 45887, 45886, 45885, 45884, 45883, 45882, 45881, 45880, 45879, 45878, 45877, 45876, 45875, 45874, 46261, 46259, 46258, 46260, 46254, 46255, 45865, 45864]
    # next to top
    elements = [31433, 31432, 31430, 31429, 31428, 30922, 30921, 30920, 30427, 30426, 30421, 29941, 29942, 29463, 29462, 29460, 29459, 29458, 29457, 28983, 28982, 28980, 28979, 28978, 28977, 28976, 28975, 28974, 28973, 28972, 28969, 28510, 28509, 28066, 28065, 27634, 27633, 28062, 27630, 27629, 27194, 27193, 27192, 27191, 27189, 27188, 27187, 27186, 27185, 27183, 27182, 27181, 27614, 27613, 27612, 27611, 27610, 27609, 27608, 27607, 27606, 27605, 27604, 27603, 27602, 27166, 27165, 27598, 27597, 27596, 27595, 27594, 27593, 27592, 27591, 27590, 27589, 27588]
    ### top pass
    #elements = [27241, 27240, 27239, 27238, 27237, 26777, 26776, 26292, 26291, 26287, 26286, 25783, 25782, 25284, 25283, 25279, 25278, 25277, 25276, 25275, 25274, 25273, 25272, 25271, 25270, 25269, 25268, 25267, 25266, 25265, 25264, 25263, 25261, 25260, 25259, 24768, 24767, 24764, 24763, 24762, 24761, 24760, 24259, 24258, 24257, 24256, 24254, 24253, 24252, 24251, 24250, 24249, 23723, 23722, 23721, 24243, 24242, 24241, 24240, 24239, 24237, 24236, 24235, 24234, 23708, 23707, 23706, 24229, 24228, 24227, 24226]
    ### middle pass
    #elements = [21706, 21218, 21217, 21216, 20720, 20719, 20718, 20715, 20714, 20713, 20712, 20710, 20709, 20708, 20707, 20706, 20705, 20210, 20209, 19719, 19718, 19715, 19200, 19199, 19198, 18651, 18650, 18649, 18648, 18647, 18646, 18645, 18644, 18092, 18091, 18090, 18089, 18088, 18087, 18086, 18085, 18084, 18083, 17509, 17508, 17507, 17506, 17504, 17503, 16927, 16926, 16350, 16349, 16348, 16347, 16346, 16345, 16344, 16343, 16342, 16340, 16339, 16341, 16910, 16911, 17478, 17477, 17476, 17475, 16903, 16902, 16901, 17468, 17467, 18041, 17463, 17462, 17461, 17459, 17458]
    ### bottom pass
    #elements = [14587, 13965, 13964, 13963, 13352, 13351, 12762, 12761, 12758, 12753, 12183, 12178, 11621, 11618, 11617, 11070, 11069, 10544, 10543, 10048, 10047, 9572, 9571, 9570, 9569, 9568, 9105, 9104, 8664, 8663, 8239, 8238, 8237, 7822, 7821, 7820, 7807, 7802, 7396, 7395, 6988, 6987, 6605, 6604, 6603, 6598, 6218, 6217, 6216, 5836, 5835, 5834, 5833, 5824, 5823, 5822, 5821, 5817, 5816, 5454, 5453, 5452, 5451, 5450, 5449, 5447, 5446, 5445, 5444, 5443, 5442, 5441, 5801, 5800, 5799, 5798, 5797, 5434, 5433, 5432, 5431, 5430, 5429, 5074, 5073, 5072, 5071, 5070, 5069, 5068, 5419, 5418, 5417, 5416]



    nc = net.Dataset(fileDir+filename).variables
    time = nc['time'][:]+678942
    time = np.array([time]).transpose()
    time = conv_time(time)
    time = time.flatten()
    _,a = np.where([time == '2014-02-02 03:39:59'])
    _,b = np.where([time == '2014-02-02 13:49:59'])
    array = np.linspace(a[:],b[:],b[:][:]-a[:][:]+1)
    el = elements

    nbe = nc['nbe'][:]
    a2u = nc['a2u'][:]
    a1u = nc['a1u'][:]
    lat = nc['lat'][:]
    lon = nc['lon'][:]
    nv = nc['nv'][:].T-1
    grid =  Tri.Triangulation(lon,lat,triangles=nv)

    for x,y in enumerate(array):
        print x
        y=int(y)
        u = nc['u'][y,:,:]
        v = nc['v'][y,:,:]
        curl = np.zeros([10,len(el)])
        for i in range(10):
            dudy=a2u[0,el]*u[i,el]+a2u[1,el]*u[i,nbe[0,el]-1]+a2u[2,el]*u[i,nbe[1,el]-1]+a2u[3,el]*u[i,nbe[2,el]-1]
            dvdx=a1u[0,el]*v[i,el]+a1u[1,el]*v[i,nbe[0,el]-1]+a1u[2,el]*v[i,nbe[1,el]-1]+a1u[3,el]*v[i,nbe[2,el]-1]
            curl[i,:] = dvdx-dudy

        lat = nc['latc'][el]
        lon = nc['lonc'][el]

        fig,ax = plt.subplots()
        plt.rc('font',size='22')
        levels = np.linspace(-0.07,0.07,20)
        cs = ax.contourf(lon,siglay,curl,levels=levels,cmap=plt.cm.RdBu)
        ax.contour(lon,siglay,curl,cs.levels,colors='k',hold='on')
        cbar = fig.colorbar(cs,ax=ax)
        cbar.set_label(r'Vorticity $(1/s)$', rotation=-90,labelpad=30)
        plt.title(str(time[y]))
        ax.set_xlabel('Longitude')
        scale = 1
        ticks = ticker.FuncFormatter(lambda lon, pos: '{0:g}'.format(lon/scale))
        ax.xaxis.set_major_formatter(ticks)
        ax.yaxis.set_major_formatter(ticks)
        ax.get_xaxis().set_visible(False)
        #ax.get_yaxis().set_visible(False)
        plt.savefig("/home/aidan/thesis/defence_presentation/v_vort//vortv-"+str(x)+".jpg",format='jpeg')
        if i == 0:
            plt.show()
        plt.close()
